// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ECParametersType.hxx"

#include "FieldIDType.hxx"

#include "CurveType.hxx"

#include "ECPointType.hxx"

#include "CryptoBinary.hxx"

#include "ECValidationDataType.hxx"

namespace oadr2b
{
  namespace dsig11
  {
    // ECParametersType
    // 

    const ECParametersType::FieldID_type& ECParametersType::
    FieldID () const
    {
      return this->FieldID_.get ();
    }

    ECParametersType::FieldID_type& ECParametersType::
    FieldID ()
    {
      return this->FieldID_.get ();
    }

    void ECParametersType::
    FieldID (const FieldID_type& x)
    {
      this->FieldID_.set (x);
    }

    void ECParametersType::
    FieldID (::std::unique_ptr< FieldID_type > x)
    {
      this->FieldID_.set (std::move (x));
    }

    const ECParametersType::Curve_type& ECParametersType::
    Curve () const
    {
      return this->Curve_.get ();
    }

    ECParametersType::Curve_type& ECParametersType::
    Curve ()
    {
      return this->Curve_.get ();
    }

    void ECParametersType::
    Curve (const Curve_type& x)
    {
      this->Curve_.set (x);
    }

    void ECParametersType::
    Curve (::std::unique_ptr< Curve_type > x)
    {
      this->Curve_.set (std::move (x));
    }

    const ECParametersType::Base_type& ECParametersType::
    Base () const
    {
      return this->Base_.get ();
    }

    ECParametersType::Base_type& ECParametersType::
    Base ()
    {
      return this->Base_.get ();
    }

    void ECParametersType::
    Base (const Base_type& x)
    {
      this->Base_.set (x);
    }

    void ECParametersType::
    Base (::std::unique_ptr< Base_type > x)
    {
      this->Base_.set (std::move (x));
    }

    const ECParametersType::Order_type& ECParametersType::
    Order () const
    {
      return this->Order_.get ();
    }

    ECParametersType::Order_type& ECParametersType::
    Order ()
    {
      return this->Order_.get ();
    }

    void ECParametersType::
    Order (const Order_type& x)
    {
      this->Order_.set (x);
    }

    void ECParametersType::
    Order (::std::unique_ptr< Order_type > x)
    {
      this->Order_.set (std::move (x));
    }

    const ECParametersType::CoFactor_optional& ECParametersType::
    CoFactor () const
    {
      return this->CoFactor_;
    }

    ECParametersType::CoFactor_optional& ECParametersType::
    CoFactor ()
    {
      return this->CoFactor_;
    }

    void ECParametersType::
    CoFactor (const CoFactor_type& x)
    {
      this->CoFactor_.set (x);
    }

    void ECParametersType::
    CoFactor (const CoFactor_optional& x)
    {
      this->CoFactor_ = x;
    }

    const ECParametersType::ValidationData_optional& ECParametersType::
    ValidationData () const
    {
      return this->ValidationData_;
    }

    ECParametersType::ValidationData_optional& ECParametersType::
    ValidationData ()
    {
      return this->ValidationData_;
    }

    void ECParametersType::
    ValidationData (const ValidationData_type& x)
    {
      this->ValidationData_.set (x);
    }

    void ECParametersType::
    ValidationData (const ValidationData_optional& x)
    {
      this->ValidationData_ = x;
    }

    void ECParametersType::
    ValidationData (::std::unique_ptr< ValidationData_type > x)
    {
      this->ValidationData_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    // ECParametersType
    //

    ECParametersType::
    ECParametersType (const FieldID_type& FieldID,
                      const Curve_type& Curve,
                      const Base_type& Base,
                      const Order_type& Order)
    : ::xml_schema::type (),
      FieldID_ (FieldID, this),
      Curve_ (Curve, this),
      Base_ (Base, this),
      Order_ (Order, this),
      CoFactor_ (this),
      ValidationData_ (this)
    {
    }

    ECParametersType::
    ECParametersType (::std::unique_ptr< FieldID_type > FieldID,
                      ::std::unique_ptr< Curve_type > Curve,
                      const Base_type& Base,
                      const Order_type& Order)
    : ::xml_schema::type (),
      FieldID_ (std::move (FieldID), this),
      Curve_ (std::move (Curve), this),
      Base_ (Base, this),
      Order_ (Order, this),
      CoFactor_ (this),
      ValidationData_ (this)
    {
    }

    ECParametersType::
    ECParametersType (const ECParametersType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FieldID_ (x.FieldID_, f, this),
      Curve_ (x.Curve_, f, this),
      Base_ (x.Base_, f, this),
      Order_ (x.Order_, f, this),
      CoFactor_ (x.CoFactor_, f, this),
      ValidationData_ (x.ValidationData_, f, this)
    {
    }

    ECParametersType::
    ECParametersType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FieldID_ (this),
      Curve_ (this),
      Base_ (this),
      Order_ (this),
      CoFactor_ (this),
      ValidationData_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ECParametersType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // FieldID
        //
        if (n.name () == "FieldID" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< FieldID_type > r (
            FieldID_traits::create (i, f, this));

          if (!FieldID_.present ())
          {
            this->FieldID_.set (::std::move (r));
            continue;
          }
        }

        // Curve
        //
        if (n.name () == "Curve" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< Curve_type > r (
            Curve_traits::create (i, f, this));

          if (!Curve_.present ())
          {
            this->Curve_.set (::std::move (r));
            continue;
          }
        }

        // Base
        //
        if (n.name () == "Base" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< Base_type > r (
            Base_traits::create (i, f, this));

          if (!Base_.present ())
          {
            this->Base_.set (::std::move (r));
            continue;
          }
        }

        // Order
        //
        if (n.name () == "Order" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< Order_type > r (
            Order_traits::create (i, f, this));

          if (!Order_.present ())
          {
            this->Order_.set (::std::move (r));
            continue;
          }
        }

        // CoFactor
        //
        if (n.name () == "CoFactor" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          if (!this->CoFactor_)
          {
            this->CoFactor_.set (CoFactor_traits::create (i, f, this));
            continue;
          }
        }

        // ValidationData
        //
        if (n.name () == "ValidationData" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< ValidationData_type > r (
            ValidationData_traits::create (i, f, this));

          if (!this->ValidationData_)
          {
            this->ValidationData_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!FieldID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "FieldID",
          "http://www.w3.org/2009/xmldsig11#");
      }

      if (!Curve_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Curve",
          "http://www.w3.org/2009/xmldsig11#");
      }

      if (!Base_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Base",
          "http://www.w3.org/2009/xmldsig11#");
      }

      if (!Order_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Order",
          "http://www.w3.org/2009/xmldsig11#");
      }
    }

    ECParametersType* ECParametersType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ECParametersType (*this, f, c);
    }

    ECParametersType& ECParametersType::
    operator= (const ECParametersType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->FieldID_ = x.FieldID_;
        this->Curve_ = x.Curve_;
        this->Base_ = x.Base_;
        this->Order_ = x.Order_;
        this->CoFactor_ = x.CoFactor_;
        this->ValidationData_ = x.ValidationData_;
      }

      return *this;
    }

    ECParametersType::
    ~ECParametersType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace dsig11
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    void
    operator<< (::xercesc::DOMElement& e, const ECParametersType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // FieldID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "FieldID",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.FieldID ();
      }

      // Curve
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Curve",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.Curve ();
      }

      // Base
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Base",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.Base ();
      }

      // Order
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Order",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.Order ();
      }

      // CoFactor
      //
      if (i.CoFactor ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CoFactor",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.CoFactor ();
      }

      // ValidationData
      //
      if (i.ValidationData ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ValidationData",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.ValidationData ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

