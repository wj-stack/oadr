// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "RetrievalMethodType.hxx"

#include "TransformsType.hxx"

namespace oadr2b
{
  namespace sig
  {
    // RetrievalMethodType
    // 

    const RetrievalMethodType::Transforms_optional& RetrievalMethodType::
    Transforms () const
    {
      return this->Transforms_;
    }

    RetrievalMethodType::Transforms_optional& RetrievalMethodType::
    Transforms ()
    {
      return this->Transforms_;
    }

    void RetrievalMethodType::
    Transforms (const Transforms_type& x)
    {
      this->Transforms_.set (x);
    }

    void RetrievalMethodType::
    Transforms (const Transforms_optional& x)
    {
      this->Transforms_ = x;
    }

    void RetrievalMethodType::
    Transforms (::std::unique_ptr< Transforms_type > x)
    {
      this->Transforms_.set (std::move (x));
    }

    const RetrievalMethodType::URI_optional& RetrievalMethodType::
    URI () const
    {
      return this->URI_;
    }

    RetrievalMethodType::URI_optional& RetrievalMethodType::
    URI ()
    {
      return this->URI_;
    }

    void RetrievalMethodType::
    URI (const URI_type& x)
    {
      this->URI_.set (x);
    }

    void RetrievalMethodType::
    URI (const URI_optional& x)
    {
      this->URI_ = x;
    }

    void RetrievalMethodType::
    URI (::std::unique_ptr< URI_type > x)
    {
      this->URI_.set (std::move (x));
    }

    const RetrievalMethodType::Type_optional& RetrievalMethodType::
    Type () const
    {
      return this->Type_;
    }

    RetrievalMethodType::Type_optional& RetrievalMethodType::
    Type ()
    {
      return this->Type_;
    }

    void RetrievalMethodType::
    Type (const Type_type& x)
    {
      this->Type_.set (x);
    }

    void RetrievalMethodType::
    Type (const Type_optional& x)
    {
      this->Type_ = x;
    }

    void RetrievalMethodType::
    Type (::std::unique_ptr< Type_type > x)
    {
      this->Type_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace sig
  {
    // RetrievalMethodType
    //

    RetrievalMethodType::
    RetrievalMethodType ()
    : ::xml_schema::type (),
      Transforms_ (this),
      URI_ (this),
      Type_ (this)
    {
    }

    RetrievalMethodType::
    RetrievalMethodType (const RetrievalMethodType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Transforms_ (x.Transforms_, f, this),
      URI_ (x.URI_, f, this),
      Type_ (x.Type_, f, this)
    {
    }

    RetrievalMethodType::
    RetrievalMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Transforms_ (this),
      URI_ (this),
      Type_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void RetrievalMethodType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Transforms
        //
        if (n.name () == "Transforms" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
        {
          ::std::unique_ptr< Transforms_type > r (
            Transforms_traits::create (i, f, this));

          if (!this->Transforms_)
          {
            this->Transforms_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "URI" && n.namespace_ ().empty ())
        {
          this->URI_.set (URI_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "Type" && n.namespace_ ().empty ())
        {
          this->Type_.set (Type_traits::create (i, f, this));
          continue;
        }
      }
    }

    RetrievalMethodType* RetrievalMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RetrievalMethodType (*this, f, c);
    }

    RetrievalMethodType& RetrievalMethodType::
    operator= (const RetrievalMethodType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Transforms_ = x.Transforms_;
        this->URI_ = x.URI_;
        this->Type_ = x.Type_;
      }

      return *this;
    }

    RetrievalMethodType::
    ~RetrievalMethodType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace sig
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace sig
  {
    void
    operator<< (::xercesc::DOMElement& e, const RetrievalMethodType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Transforms
      //
      if (i.Transforms ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Transforms",
            "http://www.w3.org/2000/09/xmldsig#",
            e));

        s << *i.Transforms ();
      }

      // URI
      //
      if (i.URI ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "URI",
            e));

        a << *i.URI ();
      }

      // Type
      //
      if (i.Type ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "Type",
            e));

        a << *i.Type ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

