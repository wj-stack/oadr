// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ReportSpecifierType.hxx"

#include "DurationPropType.hxx"

#include "WsCalendarIntervalType.hxx"

#include "SpecifierPayloadType.hxx"

namespace oadr2b
{
  namespace ei
  {
    // ReportSpecifierType
    // 

    const ReportSpecifierType::reportSpecifierID_type& ReportSpecifierType::
    reportSpecifierID () const
    {
      return this->reportSpecifierID_.get ();
    }

    ReportSpecifierType::reportSpecifierID_type& ReportSpecifierType::
    reportSpecifierID ()
    {
      return this->reportSpecifierID_.get ();
    }

    void ReportSpecifierType::
    reportSpecifierID (const reportSpecifierID_type& x)
    {
      this->reportSpecifierID_.set (x);
    }

    void ReportSpecifierType::
    reportSpecifierID (::std::unique_ptr< reportSpecifierID_type > x)
    {
      this->reportSpecifierID_.set (std::move (x));
    }

    const ReportSpecifierType::granularity_type& ReportSpecifierType::
    granularity () const
    {
      return this->granularity_.get ();
    }

    ReportSpecifierType::granularity_type& ReportSpecifierType::
    granularity ()
    {
      return this->granularity_.get ();
    }

    void ReportSpecifierType::
    granularity (const granularity_type& x)
    {
      this->granularity_.set (x);
    }

    void ReportSpecifierType::
    granularity (::std::unique_ptr< granularity_type > x)
    {
      this->granularity_.set (std::move (x));
    }

    const ReportSpecifierType::reportBackDuration_type& ReportSpecifierType::
    reportBackDuration () const
    {
      return this->reportBackDuration_.get ();
    }

    ReportSpecifierType::reportBackDuration_type& ReportSpecifierType::
    reportBackDuration ()
    {
      return this->reportBackDuration_.get ();
    }

    void ReportSpecifierType::
    reportBackDuration (const reportBackDuration_type& x)
    {
      this->reportBackDuration_.set (x);
    }

    void ReportSpecifierType::
    reportBackDuration (::std::unique_ptr< reportBackDuration_type > x)
    {
      this->reportBackDuration_.set (std::move (x));
    }

    const ReportSpecifierType::reportInterval_optional& ReportSpecifierType::
    reportInterval () const
    {
      return this->reportInterval_;
    }

    ReportSpecifierType::reportInterval_optional& ReportSpecifierType::
    reportInterval ()
    {
      return this->reportInterval_;
    }

    void ReportSpecifierType::
    reportInterval (const reportInterval_type& x)
    {
      this->reportInterval_.set (x);
    }

    void ReportSpecifierType::
    reportInterval (const reportInterval_optional& x)
    {
      this->reportInterval_ = x;
    }

    void ReportSpecifierType::
    reportInterval (::std::unique_ptr< reportInterval_type > x)
    {
      this->reportInterval_.set (std::move (x));
    }

    const ReportSpecifierType::specifierPayload_sequence& ReportSpecifierType::
    specifierPayload () const
    {
      return this->specifierPayload_;
    }

    ReportSpecifierType::specifierPayload_sequence& ReportSpecifierType::
    specifierPayload ()
    {
      return this->specifierPayload_;
    }

    void ReportSpecifierType::
    specifierPayload (const specifierPayload_sequence& s)
    {
      this->specifierPayload_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    // ReportSpecifierType
    //

    ReportSpecifierType::
    ReportSpecifierType (const reportSpecifierID_type& reportSpecifierID,
                         const granularity_type& granularity,
                         const reportBackDuration_type& reportBackDuration)
    : ::xml_schema::type (),
      reportSpecifierID_ (reportSpecifierID, this),
      granularity_ (granularity, this),
      reportBackDuration_ (reportBackDuration, this),
      reportInterval_ (this),
      specifierPayload_ (this)
    {
    }

    ReportSpecifierType::
    ReportSpecifierType (const reportSpecifierID_type& reportSpecifierID,
                         ::std::unique_ptr< granularity_type > granularity,
                         ::std::unique_ptr< reportBackDuration_type > reportBackDuration)
    : ::xml_schema::type (),
      reportSpecifierID_ (reportSpecifierID, this),
      granularity_ (std::move (granularity), this),
      reportBackDuration_ (std::move (reportBackDuration), this),
      reportInterval_ (this),
      specifierPayload_ (this)
    {
    }

    ReportSpecifierType::
    ReportSpecifierType (const ReportSpecifierType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      reportSpecifierID_ (x.reportSpecifierID_, f, this),
      granularity_ (x.granularity_, f, this),
      reportBackDuration_ (x.reportBackDuration_, f, this),
      reportInterval_ (x.reportInterval_, f, this),
      specifierPayload_ (x.specifierPayload_, f, this)
    {
    }

    ReportSpecifierType::
    ReportSpecifierType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      reportSpecifierID_ (this),
      granularity_ (this),
      reportBackDuration_ (this),
      reportInterval_ (this),
      specifierPayload_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ReportSpecifierType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // reportSpecifierID
        //
        if (n.name () == "reportSpecifierID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< reportSpecifierID_type > r (
            reportSpecifierID_traits::create (i, f, this));

          if (!reportSpecifierID_.present ())
          {
            this->reportSpecifierID_.set (::std::move (r));
            continue;
          }
        }

        // granularity
        //
        if (n.name () == "granularity" && n.namespace_ () == "urn:ietf:params:xml:ns:icalendar-2.0")
        {
          ::std::unique_ptr< granularity_type > r (
            granularity_traits::create (i, f, this));

          if (!granularity_.present ())
          {
            this->granularity_.set (::std::move (r));
            continue;
          }
        }

        // reportBackDuration
        //
        if (n.name () == "reportBackDuration" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< reportBackDuration_type > r (
            reportBackDuration_traits::create (i, f, this));

          if (!reportBackDuration_.present ())
          {
            this->reportBackDuration_.set (::std::move (r));
            continue;
          }
        }

        // reportInterval
        //
        if (n.name () == "reportInterval" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< reportInterval_type > r (
            reportInterval_traits::create (i, f, this));

          if (!this->reportInterval_)
          {
            this->reportInterval_.set (::std::move (r));
            continue;
          }
        }

        // specifierPayload
        //
        if (n.name () == "specifierPayload" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< specifierPayload_type > r (
            specifierPayload_traits::create (i, f, this));

          this->specifierPayload_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      if (!reportSpecifierID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "reportSpecifierID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!granularity_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "granularity",
          "urn:ietf:params:xml:ns:icalendar-2.0");
      }

      if (!reportBackDuration_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "reportBackDuration",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }
    }

    ReportSpecifierType* ReportSpecifierType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ReportSpecifierType (*this, f, c);
    }

    ReportSpecifierType& ReportSpecifierType::
    operator= (const ReportSpecifierType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->reportSpecifierID_ = x.reportSpecifierID_;
        this->granularity_ = x.granularity_;
        this->reportBackDuration_ = x.reportBackDuration_;
        this->reportInterval_ = x.reportInterval_;
        this->specifierPayload_ = x.specifierPayload_;
      }

      return *this;
    }

    ReportSpecifierType::
    ~ReportSpecifierType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace ei
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    void
    operator<< (::xercesc::DOMElement& e, const ReportSpecifierType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // reportSpecifierID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reportSpecifierID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.reportSpecifierID ();
      }

      // granularity
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "granularity",
            "urn:ietf:params:xml:ns:icalendar-2.0",
            e));

        s << i.granularity ();
      }

      // reportBackDuration
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reportBackDuration",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.reportBackDuration ();
      }

      // reportInterval
      //
      if (i.reportInterval ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reportInterval",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.reportInterval ();
      }

      // specifierPayload
      //
      for (ReportSpecifierType::specifierPayload_const_iterator
           b (i.specifierPayload ().begin ()), n (i.specifierPayload ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "specifierPayload",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *b;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

