// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PnBFieldParamsType.hxx"

namespace oadr2b
{
  namespace dsig11
  {
    // PnBFieldParamsType
    // 

    const PnBFieldParamsType::K1_type& PnBFieldParamsType::
    K1 () const
    {
      return this->K1_.get ();
    }

    PnBFieldParamsType::K1_type& PnBFieldParamsType::
    K1 ()
    {
      return this->K1_.get ();
    }

    void PnBFieldParamsType::
    K1 (const K1_type& x)
    {
      this->K1_.set (x);
    }

    const PnBFieldParamsType::K2_type& PnBFieldParamsType::
    K2 () const
    {
      return this->K2_.get ();
    }

    PnBFieldParamsType::K2_type& PnBFieldParamsType::
    K2 ()
    {
      return this->K2_.get ();
    }

    void PnBFieldParamsType::
    K2 (const K2_type& x)
    {
      this->K2_.set (x);
    }

    const PnBFieldParamsType::K3_type& PnBFieldParamsType::
    K3 () const
    {
      return this->K3_.get ();
    }

    PnBFieldParamsType::K3_type& PnBFieldParamsType::
    K3 ()
    {
      return this->K3_.get ();
    }

    void PnBFieldParamsType::
    K3 (const K3_type& x)
    {
      this->K3_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    // PnBFieldParamsType
    //

    PnBFieldParamsType::
    PnBFieldParamsType (const M_type& M,
                        const K1_type& K1,
                        const K2_type& K2,
                        const K3_type& K3)
    : ::oadr2b::dsig11::CharTwoFieldParamsType (M),
      K1_ (K1, this),
      K2_ (K2, this),
      K3_ (K3, this)
    {
    }

    PnBFieldParamsType::
    PnBFieldParamsType (const PnBFieldParamsType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::oadr2b::dsig11::CharTwoFieldParamsType (x, f, c),
      K1_ (x.K1_, f, this),
      K2_ (x.K2_, f, this),
      K3_ (x.K3_, f, this)
    {
    }

    PnBFieldParamsType::
    PnBFieldParamsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::oadr2b::dsig11::CharTwoFieldParamsType (e, f | ::xml_schema::flags::base, c),
      K1_ (this),
      K2_ (this),
      K3_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PnBFieldParamsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::oadr2b::dsig11::CharTwoFieldParamsType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // K1
        //
        if (n.name () == "K1" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          if (!K1_.present ())
          {
            this->K1_.set (K1_traits::create (i, f, this));
            continue;
          }
        }

        // K2
        //
        if (n.name () == "K2" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          if (!K2_.present ())
          {
            this->K2_.set (K2_traits::create (i, f, this));
            continue;
          }
        }

        // K3
        //
        if (n.name () == "K3" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          if (!K3_.present ())
          {
            this->K3_.set (K3_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!K1_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "K1",
          "http://www.w3.org/2009/xmldsig11#");
      }

      if (!K2_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "K2",
          "http://www.w3.org/2009/xmldsig11#");
      }

      if (!K3_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "K3",
          "http://www.w3.org/2009/xmldsig11#");
      }
    }

    PnBFieldParamsType* PnBFieldParamsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PnBFieldParamsType (*this, f, c);
    }

    PnBFieldParamsType& PnBFieldParamsType::
    operator= (const PnBFieldParamsType& x)
    {
      if (this != &x)
      {
        static_cast< ::oadr2b::dsig11::CharTwoFieldParamsType& > (*this) = x;
        this->K1_ = x.K1_;
        this->K2_ = x.K2_;
        this->K3_ = x.K3_;
      }

      return *this;
    }

    PnBFieldParamsType::
    ~PnBFieldParamsType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace dsig11
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    void
    operator<< (::xercesc::DOMElement& e, const PnBFieldParamsType& i)
    {
      e << static_cast< const ::oadr2b::dsig11::CharTwoFieldParamsType& > (i);

      // K1
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "K1",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.K1 ();
      }

      // K2
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "K2",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.K2 ();
      }

      // K3
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "K3",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.K3 ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

