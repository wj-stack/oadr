// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "eventDescriptorType.hxx"

#include "DateTimeType.hxx"

#include "eiMarketContext.hxx"

#include "EventStatusEnumeratedType.hxx"

namespace oadr2b
{
  namespace ei
  {
    // eventDescriptorType
    // 

    const eventDescriptorType::eventID_type& eventDescriptorType::
    eventID () const
    {
      return this->eventID_.get ();
    }

    eventDescriptorType::eventID_type& eventDescriptorType::
    eventID ()
    {
      return this->eventID_.get ();
    }

    void eventDescriptorType::
    eventID (const eventID_type& x)
    {
      this->eventID_.set (x);
    }

    void eventDescriptorType::
    eventID (::std::unique_ptr< eventID_type > x)
    {
      this->eventID_.set (std::move (x));
    }

    const eventDescriptorType::modificationNumber_type& eventDescriptorType::
    modificationNumber () const
    {
      return this->modificationNumber_.get ();
    }

    eventDescriptorType::modificationNumber_type& eventDescriptorType::
    modificationNumber ()
    {
      return this->modificationNumber_.get ();
    }

    void eventDescriptorType::
    modificationNumber (const modificationNumber_type& x)
    {
      this->modificationNumber_.set (x);
    }

    const eventDescriptorType::modificationDateTime_optional& eventDescriptorType::
    modificationDateTime () const
    {
      return this->modificationDateTime_;
    }

    eventDescriptorType::modificationDateTime_optional& eventDescriptorType::
    modificationDateTime ()
    {
      return this->modificationDateTime_;
    }

    void eventDescriptorType::
    modificationDateTime (const modificationDateTime_type& x)
    {
      this->modificationDateTime_.set (x);
    }

    void eventDescriptorType::
    modificationDateTime (const modificationDateTime_optional& x)
    {
      this->modificationDateTime_ = x;
    }

    void eventDescriptorType::
    modificationDateTime (::std::unique_ptr< modificationDateTime_type > x)
    {
      this->modificationDateTime_.set (std::move (x));
    }

    const eventDescriptorType::modificationReason_optional& eventDescriptorType::
    modificationReason () const
    {
      return this->modificationReason_;
    }

    eventDescriptorType::modificationReason_optional& eventDescriptorType::
    modificationReason ()
    {
      return this->modificationReason_;
    }

    void eventDescriptorType::
    modificationReason (const modificationReason_type& x)
    {
      this->modificationReason_.set (x);
    }

    void eventDescriptorType::
    modificationReason (const modificationReason_optional& x)
    {
      this->modificationReason_ = x;
    }

    void eventDescriptorType::
    modificationReason (::std::unique_ptr< modificationReason_type > x)
    {
      this->modificationReason_.set (std::move (x));
    }

    const eventDescriptorType::priority_optional& eventDescriptorType::
    priority () const
    {
      return this->priority_;
    }

    eventDescriptorType::priority_optional& eventDescriptorType::
    priority ()
    {
      return this->priority_;
    }

    void eventDescriptorType::
    priority (const priority_type& x)
    {
      this->priority_.set (x);
    }

    void eventDescriptorType::
    priority (const priority_optional& x)
    {
      this->priority_ = x;
    }

    const eventDescriptorType::eiMarketContext_type& eventDescriptorType::
    eiMarketContext () const
    {
      return this->eiMarketContext_.get ();
    }

    eventDescriptorType::eiMarketContext_type& eventDescriptorType::
    eiMarketContext ()
    {
      return this->eiMarketContext_.get ();
    }

    void eventDescriptorType::
    eiMarketContext (const eiMarketContext_type& x)
    {
      this->eiMarketContext_.set (x);
    }

    void eventDescriptorType::
    eiMarketContext (::std::unique_ptr< eiMarketContext_type > x)
    {
      this->eiMarketContext_.set (std::move (x));
    }

    const eventDescriptorType::createdDateTime_type& eventDescriptorType::
    createdDateTime () const
    {
      return this->createdDateTime_.get ();
    }

    eventDescriptorType::createdDateTime_type& eventDescriptorType::
    createdDateTime ()
    {
      return this->createdDateTime_.get ();
    }

    void eventDescriptorType::
    createdDateTime (const createdDateTime_type& x)
    {
      this->createdDateTime_.set (x);
    }

    void eventDescriptorType::
    createdDateTime (::std::unique_ptr< createdDateTime_type > x)
    {
      this->createdDateTime_.set (std::move (x));
    }

    const eventDescriptorType::eventStatus_type& eventDescriptorType::
    eventStatus () const
    {
      return this->eventStatus_.get ();
    }

    eventDescriptorType::eventStatus_type& eventDescriptorType::
    eventStatus ()
    {
      return this->eventStatus_.get ();
    }

    void eventDescriptorType::
    eventStatus (const eventStatus_type& x)
    {
      this->eventStatus_.set (x);
    }

    void eventDescriptorType::
    eventStatus (::std::unique_ptr< eventStatus_type > x)
    {
      this->eventStatus_.set (std::move (x));
    }

    const eventDescriptorType::testEvent_optional& eventDescriptorType::
    testEvent () const
    {
      return this->testEvent_;
    }

    eventDescriptorType::testEvent_optional& eventDescriptorType::
    testEvent ()
    {
      return this->testEvent_;
    }

    void eventDescriptorType::
    testEvent (const testEvent_type& x)
    {
      this->testEvent_.set (x);
    }

    void eventDescriptorType::
    testEvent (const testEvent_optional& x)
    {
      this->testEvent_ = x;
    }

    void eventDescriptorType::
    testEvent (::std::unique_ptr< testEvent_type > x)
    {
      this->testEvent_.set (std::move (x));
    }

    const eventDescriptorType::vtnComment_optional& eventDescriptorType::
    vtnComment () const
    {
      return this->vtnComment_;
    }

    eventDescriptorType::vtnComment_optional& eventDescriptorType::
    vtnComment ()
    {
      return this->vtnComment_;
    }

    void eventDescriptorType::
    vtnComment (const vtnComment_type& x)
    {
      this->vtnComment_.set (x);
    }

    void eventDescriptorType::
    vtnComment (const vtnComment_optional& x)
    {
      this->vtnComment_ = x;
    }

    void eventDescriptorType::
    vtnComment (::std::unique_ptr< vtnComment_type > x)
    {
      this->vtnComment_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    // eventDescriptorType
    //

    eventDescriptorType::
    eventDescriptorType (const eventID_type& eventID,
                         const modificationNumber_type& modificationNumber,
                         const eiMarketContext_type& eiMarketContext,
                         const createdDateTime_type& createdDateTime,
                         const eventStatus_type& eventStatus)
    : ::xml_schema::type (),
      eventID_ (eventID, this),
      modificationNumber_ (modificationNumber, this),
      modificationDateTime_ (this),
      modificationReason_ (this),
      priority_ (this),
      eiMarketContext_ (eiMarketContext, this),
      createdDateTime_ (createdDateTime, this),
      eventStatus_ (eventStatus, this),
      testEvent_ (this),
      vtnComment_ (this)
    {
    }

    eventDescriptorType::
    eventDescriptorType (const eventID_type& eventID,
                         const modificationNumber_type& modificationNumber,
                         ::std::unique_ptr< eiMarketContext_type > eiMarketContext,
                         const createdDateTime_type& createdDateTime,
                         const eventStatus_type& eventStatus)
    : ::xml_schema::type (),
      eventID_ (eventID, this),
      modificationNumber_ (modificationNumber, this),
      modificationDateTime_ (this),
      modificationReason_ (this),
      priority_ (this),
      eiMarketContext_ (std::move (eiMarketContext), this),
      createdDateTime_ (createdDateTime, this),
      eventStatus_ (eventStatus, this),
      testEvent_ (this),
      vtnComment_ (this)
    {
    }

    eventDescriptorType::
    eventDescriptorType (const eventDescriptorType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      eventID_ (x.eventID_, f, this),
      modificationNumber_ (x.modificationNumber_, f, this),
      modificationDateTime_ (x.modificationDateTime_, f, this),
      modificationReason_ (x.modificationReason_, f, this),
      priority_ (x.priority_, f, this),
      eiMarketContext_ (x.eiMarketContext_, f, this),
      createdDateTime_ (x.createdDateTime_, f, this),
      eventStatus_ (x.eventStatus_, f, this),
      testEvent_ (x.testEvent_, f, this),
      vtnComment_ (x.vtnComment_, f, this)
    {
    }

    eventDescriptorType::
    eventDescriptorType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      eventID_ (this),
      modificationNumber_ (this),
      modificationDateTime_ (this),
      modificationReason_ (this),
      priority_ (this),
      eiMarketContext_ (this),
      createdDateTime_ (this),
      eventStatus_ (this),
      testEvent_ (this),
      vtnComment_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void eventDescriptorType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // eventID
        //
        if (n.name () == "eventID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< eventID_type > r (
            eventID_traits::create (i, f, this));

          if (!eventID_.present ())
          {
            this->eventID_.set (::std::move (r));
            continue;
          }
        }

        // modificationNumber
        //
        if (n.name () == "modificationNumber" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          if (!modificationNumber_.present ())
          {
            this->modificationNumber_.set (modificationNumber_traits::create (i, f, this));
            continue;
          }
        }

        // modificationDateTime
        //
        if (n.name () == "modificationDateTime" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< modificationDateTime_type > r (
            modificationDateTime_traits::create (i, f, this));

          if (!this->modificationDateTime_)
          {
            this->modificationDateTime_.set (::std::move (r));
            continue;
          }
        }

        // modificationReason
        //
        if (n.name () == "modificationReason" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< modificationReason_type > r (
            modificationReason_traits::create (i, f, this));

          if (!this->modificationReason_)
          {
            this->modificationReason_.set (::std::move (r));
            continue;
          }
        }

        // priority
        //
        if (n.name () == "priority" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          if (!this->priority_)
          {
            this->priority_.set (priority_traits::create (i, f, this));
            continue;
          }
        }

        // eiMarketContext
        //
        if (n.name () == "eiMarketContext" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< eiMarketContext_type > r (
            eiMarketContext_traits::create (i, f, this));

          if (!eiMarketContext_.present ())
          {
            this->eiMarketContext_.set (::std::move (r));
            continue;
          }
        }

        // createdDateTime
        //
        if (n.name () == "createdDateTime" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< createdDateTime_type > r (
            createdDateTime_traits::create (i, f, this));

          if (!createdDateTime_.present ())
          {
            this->createdDateTime_.set (::std::move (r));
            continue;
          }
        }

        // eventStatus
        //
        if (n.name () == "eventStatus" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< eventStatus_type > r (
            eventStatus_traits::create (i, f, this));

          if (!eventStatus_.present ())
          {
            this->eventStatus_.set (::std::move (r));
            continue;
          }
        }

        // testEvent
        //
        if (n.name () == "testEvent" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< testEvent_type > r (
            testEvent_traits::create (i, f, this));

          if (!this->testEvent_)
          {
            this->testEvent_.set (::std::move (r));
            continue;
          }
        }

        // vtnComment
        //
        if (n.name () == "vtnComment" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< vtnComment_type > r (
            vtnComment_traits::create (i, f, this));

          if (!this->vtnComment_)
          {
            this->vtnComment_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!eventID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "eventID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!modificationNumber_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "modificationNumber",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!eiMarketContext_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "eiMarketContext",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!createdDateTime_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "createdDateTime",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!eventStatus_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "eventStatus",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }
    }

    eventDescriptorType* eventDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class eventDescriptorType (*this, f, c);
    }

    eventDescriptorType& eventDescriptorType::
    operator= (const eventDescriptorType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->eventID_ = x.eventID_;
        this->modificationNumber_ = x.modificationNumber_;
        this->modificationDateTime_ = x.modificationDateTime_;
        this->modificationReason_ = x.modificationReason_;
        this->priority_ = x.priority_;
        this->eiMarketContext_ = x.eiMarketContext_;
        this->createdDateTime_ = x.createdDateTime_;
        this->eventStatus_ = x.eventStatus_;
        this->testEvent_ = x.testEvent_;
        this->vtnComment_ = x.vtnComment_;
      }

      return *this;
    }

    eventDescriptorType::
    ~eventDescriptorType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace ei
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    void
    operator<< (::xercesc::DOMElement& e, const eventDescriptorType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // eventID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "eventID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.eventID ();
      }

      // modificationNumber
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "modificationNumber",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.modificationNumber ();
      }

      // modificationDateTime
      //
      if (i.modificationDateTime ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "modificationDateTime",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.modificationDateTime ();
      }

      // modificationReason
      //
      if (i.modificationReason ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "modificationReason",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.modificationReason ();
      }

      // priority
      //
      if (i.priority ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "priority",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.priority ();
      }

      // eiMarketContext
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "eiMarketContext",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.eiMarketContext ();
      }

      // createdDateTime
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "createdDateTime",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.createdDateTime ();
      }

      // eventStatus
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "eventStatus",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.eventStatus ();
      }

      // testEvent
      //
      if (i.testEvent ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "testEvent",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.testEvent ();
      }

      // vtnComment
      //
      if (i.vtnComment ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "vtnComment",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.vtnComment ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

