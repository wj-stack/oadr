// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PowerAttributesType.hxx"

namespace power
{
  // PowerAttributesType
  // 

  const PowerAttributesType::hertz_type& PowerAttributesType::
  hertz () const
  {
    return this->hertz_.get ();
  }

  PowerAttributesType::hertz_type& PowerAttributesType::
  hertz ()
  {
    return this->hertz_.get ();
  }

  void PowerAttributesType::
  hertz (const hertz_type& x)
  {
    this->hertz_.set (x);
  }

  const PowerAttributesType::voltage_type& PowerAttributesType::
  voltage () const
  {
    return this->voltage_.get ();
  }

  PowerAttributesType::voltage_type& PowerAttributesType::
  voltage ()
  {
    return this->voltage_.get ();
  }

  void PowerAttributesType::
  voltage (const voltage_type& x)
  {
    this->voltage_.set (x);
  }

  const PowerAttributesType::ac_type& PowerAttributesType::
  ac () const
  {
    return this->ac_.get ();
  }

  PowerAttributesType::ac_type& PowerAttributesType::
  ac ()
  {
    return this->ac_.get ();
  }

  void PowerAttributesType::
  ac (const ac_type& x)
  {
    this->ac_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace power
{
  // PowerAttributesType
  //

  PowerAttributesType::
  PowerAttributesType (const hertz_type& hertz,
                       const voltage_type& voltage,
                       const ac_type& ac)
  : ::xml_schema::type (),
    hertz_ (hertz, this),
    voltage_ (voltage, this),
    ac_ (ac, this)
  {
  }

  PowerAttributesType::
  PowerAttributesType (const PowerAttributesType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    hertz_ (x.hertz_, f, this),
    voltage_ (x.voltage_, f, this),
    ac_ (x.ac_, f, this)
  {
  }

  PowerAttributesType::
  PowerAttributesType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    hertz_ (this),
    voltage_ (this),
    ac_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void PowerAttributesType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // hertz
      //
      if (n.name () == "hertz" && n.namespace_ () == "http://docs.oasis-open.org/ns/emix/2011/06/power")
      {
        if (!hertz_.present ())
        {
          this->hertz_.set (hertz_traits::create (i, f, this));
          continue;
        }
      }

      // voltage
      //
      if (n.name () == "voltage" && n.namespace_ () == "http://docs.oasis-open.org/ns/emix/2011/06/power")
      {
        if (!voltage_.present ())
        {
          this->voltage_.set (voltage_traits::create (i, f, this));
          continue;
        }
      }

      // ac
      //
      if (n.name () == "ac" && n.namespace_ () == "http://docs.oasis-open.org/ns/emix/2011/06/power")
      {
        if (!ac_.present ())
        {
          this->ac_.set (ac_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!hertz_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "hertz",
        "http://docs.oasis-open.org/ns/emix/2011/06/power");
    }

    if (!voltage_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "voltage",
        "http://docs.oasis-open.org/ns/emix/2011/06/power");
    }

    if (!ac_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ac",
        "http://docs.oasis-open.org/ns/emix/2011/06/power");
    }
  }

  PowerAttributesType* PowerAttributesType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PowerAttributesType (*this, f, c);
  }

  PowerAttributesType& PowerAttributesType::
  operator= (const PowerAttributesType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->hertz_ = x.hertz_;
      this->voltage_ = x.voltage_;
      this->ac_ = x.ac_;
    }

    return *this;
  }

  PowerAttributesType::
  ~PowerAttributesType ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace power
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace power
{
  void
  operator<< (::xercesc::DOMElement& e, const PowerAttributesType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // hertz
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hertz",
          "http://docs.oasis-open.org/ns/emix/2011/06/power",
          e));

      s << ::xml_schema::as_decimal(i.hertz ());
    }

    // voltage
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "voltage",
          "http://docs.oasis-open.org/ns/emix/2011/06/power",
          e));

      s << ::xml_schema::as_decimal(i.voltage ());
    }

    // ac
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ac",
          "http://docs.oasis-open.org/ns/emix/2011/06/power",
          e));

      s << i.ac ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

