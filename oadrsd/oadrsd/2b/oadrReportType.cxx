// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "oadrReportType.hxx"

#include "oadrReportDescriptionType.hxx"

#include "reportNameType.hxx"

#include "DateTimeType.hxx"

namespace oadr2b
{
  namespace oadr
  {
    // oadrReportType
    // 

    const oadrReportType::eiReportID_optional& oadrReportType::
    eiReportID () const
    {
      return this->eiReportID_;
    }

    oadrReportType::eiReportID_optional& oadrReportType::
    eiReportID ()
    {
      return this->eiReportID_;
    }

    void oadrReportType::
    eiReportID (const eiReportID_type& x)
    {
      this->eiReportID_.set (x);
    }

    void oadrReportType::
    eiReportID (const eiReportID_optional& x)
    {
      this->eiReportID_ = x;
    }

    void oadrReportType::
    eiReportID (::std::unique_ptr< eiReportID_type > x)
    {
      this->eiReportID_.set (std::move (x));
    }

    const oadrReportType::oadrReportDescription_sequence& oadrReportType::
    oadrReportDescription () const
    {
      return this->oadrReportDescription_;
    }

    oadrReportType::oadrReportDescription_sequence& oadrReportType::
    oadrReportDescription ()
    {
      return this->oadrReportDescription_;
    }

    void oadrReportType::
    oadrReportDescription (const oadrReportDescription_sequence& s)
    {
      this->oadrReportDescription_ = s;
    }

    const oadrReportType::reportRequestID_type& oadrReportType::
    reportRequestID () const
    {
      return this->reportRequestID_.get ();
    }

    oadrReportType::reportRequestID_type& oadrReportType::
    reportRequestID ()
    {
      return this->reportRequestID_.get ();
    }

    void oadrReportType::
    reportRequestID (const reportRequestID_type& x)
    {
      this->reportRequestID_.set (x);
    }

    void oadrReportType::
    reportRequestID (::std::unique_ptr< reportRequestID_type > x)
    {
      this->reportRequestID_.set (std::move (x));
    }

    const oadrReportType::reportSpecifierID_type& oadrReportType::
    reportSpecifierID () const
    {
      return this->reportSpecifierID_.get ();
    }

    oadrReportType::reportSpecifierID_type& oadrReportType::
    reportSpecifierID ()
    {
      return this->reportSpecifierID_.get ();
    }

    void oadrReportType::
    reportSpecifierID (const reportSpecifierID_type& x)
    {
      this->reportSpecifierID_.set (x);
    }

    void oadrReportType::
    reportSpecifierID (::std::unique_ptr< reportSpecifierID_type > x)
    {
      this->reportSpecifierID_.set (std::move (x));
    }

    const oadrReportType::reportName_optional& oadrReportType::
    reportName () const
    {
      return this->reportName_;
    }

    oadrReportType::reportName_optional& oadrReportType::
    reportName ()
    {
      return this->reportName_;
    }

    void oadrReportType::
    reportName (const reportName_type& x)
    {
      this->reportName_.set (x);
    }

    void oadrReportType::
    reportName (const reportName_optional& x)
    {
      this->reportName_ = x;
    }

    void oadrReportType::
    reportName (::std::unique_ptr< reportName_type > x)
    {
      this->reportName_.set (std::move (x));
    }

    const oadrReportType::createdDateTime_type& oadrReportType::
    createdDateTime () const
    {
      return this->createdDateTime_.get ();
    }

    oadrReportType::createdDateTime_type& oadrReportType::
    createdDateTime ()
    {
      return this->createdDateTime_.get ();
    }

    void oadrReportType::
    createdDateTime (const createdDateTime_type& x)
    {
      this->createdDateTime_.set (x);
    }

    void oadrReportType::
    createdDateTime (::std::unique_ptr< createdDateTime_type > x)
    {
      this->createdDateTime_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    // oadrReportType
    //

    oadrReportType::
    oadrReportType (const reportRequestID_type& reportRequestID,
                    const reportSpecifierID_type& reportSpecifierID,
                    const createdDateTime_type& createdDateTime)
    : ::stream::StreamBaseType (),
      eiReportID_ (this),
      oadrReportDescription_ (this),
      reportRequestID_ (reportRequestID, this),
      reportSpecifierID_ (reportSpecifierID, this),
      reportName_ (this),
      createdDateTime_ (createdDateTime, this)
    {
    }

    oadrReportType::
    oadrReportType (const oadrReportType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::stream::StreamBaseType (x, f, c),
      eiReportID_ (x.eiReportID_, f, this),
      oadrReportDescription_ (x.oadrReportDescription_, f, this),
      reportRequestID_ (x.reportRequestID_, f, this),
      reportSpecifierID_ (x.reportSpecifierID_, f, this),
      reportName_ (x.reportName_, f, this),
      createdDateTime_ (x.createdDateTime_, f, this)
    {
    }

    oadrReportType::
    oadrReportType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::stream::StreamBaseType (e, f | ::xml_schema::flags::base, c),
      eiReportID_ (this),
      oadrReportDescription_ (this),
      reportRequestID_ (this),
      reportSpecifierID_ (this),
      reportName_ (this),
      createdDateTime_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void oadrReportType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::stream::StreamBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // eiReportID
        //
        if (n.name () == "eiReportID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< eiReportID_type > r (
            eiReportID_traits::create (i, f, this));

          if (!this->eiReportID_)
          {
            this->eiReportID_.set (::std::move (r));
            continue;
          }
        }

        // oadrReportDescription
        //
        if (n.name () == "oadrReportDescription" && n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          ::std::unique_ptr< oadrReportDescription_type > r (
            oadrReportDescription_traits::create (i, f, this));

          this->oadrReportDescription_.push_back (::std::move (r));
          continue;
        }

        // reportRequestID
        //
        if (n.name () == "reportRequestID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< reportRequestID_type > r (
            reportRequestID_traits::create (i, f, this));

          if (!reportRequestID_.present ())
          {
            this->reportRequestID_.set (::std::move (r));
            continue;
          }
        }

        // reportSpecifierID
        //
        if (n.name () == "reportSpecifierID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< reportSpecifierID_type > r (
            reportSpecifierID_traits::create (i, f, this));

          if (!reportSpecifierID_.present ())
          {
            this->reportSpecifierID_.set (::std::move (r));
            continue;
          }
        }

        // reportName
        //
        if (n.name () == "reportName" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< reportName_type > r (
            reportName_traits::create (i, f, this));

          if (!this->reportName_)
          {
            this->reportName_.set (::std::move (r));
            continue;
          }
        }

        // createdDateTime
        //
        if (n.name () == "createdDateTime" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< createdDateTime_type > r (
            createdDateTime_traits::create (i, f, this));

          if (!createdDateTime_.present ())
          {
            this->createdDateTime_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!reportRequestID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "reportRequestID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!reportSpecifierID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "reportSpecifierID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!createdDateTime_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "createdDateTime",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }
    }

    oadrReportType* oadrReportType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class oadrReportType (*this, f, c);
    }

    oadrReportType& oadrReportType::
    operator= (const oadrReportType& x)
    {
      if (this != &x)
      {
        static_cast< ::stream::StreamBaseType& > (*this) = x;
        this->eiReportID_ = x.eiReportID_;
        this->oadrReportDescription_ = x.oadrReportDescription_;
        this->reportRequestID_ = x.reportRequestID_;
        this->reportSpecifierID_ = x.reportSpecifierID_;
        this->reportName_ = x.reportName_;
        this->createdDateTime_ = x.createdDateTime_;
      }

      return *this;
    }

    oadrReportType::
    ~oadrReportType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace oadr
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    void
    operator<< (::xercesc::DOMElement& e, const oadrReportType& i)
    {
      e << static_cast< const ::stream::StreamBaseType& > (i);

      // eiReportID
      //
      if (i.eiReportID ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "eiReportID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.eiReportID ();
      }

      // oadrReportDescription
      //
      for (oadrReportType::oadrReportDescription_const_iterator
           b (i.oadrReportDescription ().begin ()), n (i.oadrReportDescription ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "oadrReportDescription",
            "http://openadr.org/oadr-2.0b/2012/07",
            e));

        s << *b;
      }

      // reportRequestID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reportRequestID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.reportRequestID ();
      }

      // reportSpecifierID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reportSpecifierID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.reportSpecifierID ();
      }

      // reportName
      //
      if (i.reportName ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reportName",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.reportName ();
      }

      // createdDateTime
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "createdDateTime",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.createdDateTime ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

