// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef OADR_CREATE_PARTY_REGISTRATION_TYPE_HXX
#define OADR_CREATE_PARTY_REGISTRATION_TYPE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace oadr2b
{
  namespace oadr
  {
    class oadrCreatePartyRegistrationType;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace oadr2b
{
  namespace ei
  {
    class UidType;
  }
}

namespace oadr2b
{
  namespace oadr
  {
    class oadrProfileType;
  }
}

namespace oadr2b
{
  namespace oadr
  {
    class oadrTransportType;
  }
}

namespace oadr2b
{
  namespace ei
  {
    class schemaVersionType;
  }
}

namespace oadr2b
{
  namespace oadr
  {
    class oadrCreatePartyRegistrationType: public ::xml_schema::type
    {
      public:
      // requestID
      //
      typedef ::xml_schema::string requestID_type;
      typedef ::xsd::cxx::tree::traits< requestID_type, char > requestID_traits;

      const requestID_type&
      requestID () const;

      requestID_type&
      requestID ();

      void
      requestID (const requestID_type& x);

      void
      requestID (::std::unique_ptr< requestID_type > p);

      // registrationID
      //
      typedef ::oadr2b::ei::UidType registrationID_type;
      typedef ::xsd::cxx::tree::optional< registrationID_type > registrationID_optional;
      typedef ::xsd::cxx::tree::traits< registrationID_type, char > registrationID_traits;

      const registrationID_optional&
      registrationID () const;

      registrationID_optional&
      registrationID ();

      void
      registrationID (const registrationID_type& x);

      void
      registrationID (const registrationID_optional& x);

      void
      registrationID (::std::unique_ptr< registrationID_type > p);

      // venID
      //
      typedef ::xml_schema::string venID_type;
      typedef ::xsd::cxx::tree::optional< venID_type > venID_optional;
      typedef ::xsd::cxx::tree::traits< venID_type, char > venID_traits;

      const venID_optional&
      venID () const;

      venID_optional&
      venID ();

      void
      venID (const venID_type& x);

      void
      venID (const venID_optional& x);

      void
      venID (::std::unique_ptr< venID_type > p);

      // oadrProfileName
      //
      typedef ::oadr2b::oadr::oadrProfileType oadrProfileName_type;
      typedef ::xsd::cxx::tree::traits< oadrProfileName_type, char > oadrProfileName_traits;

      const oadrProfileName_type&
      oadrProfileName () const;

      oadrProfileName_type&
      oadrProfileName ();

      void
      oadrProfileName (const oadrProfileName_type& x);

      void
      oadrProfileName (::std::unique_ptr< oadrProfileName_type > p);

      // oadrTransportName
      //
      typedef ::oadr2b::oadr::oadrTransportType oadrTransportName_type;
      typedef ::xsd::cxx::tree::traits< oadrTransportName_type, char > oadrTransportName_traits;

      const oadrTransportName_type&
      oadrTransportName () const;

      oadrTransportName_type&
      oadrTransportName ();

      void
      oadrTransportName (const oadrTransportName_type& x);

      void
      oadrTransportName (::std::unique_ptr< oadrTransportName_type > p);

      // oadrTransportAddress
      //
      typedef ::xml_schema::string oadrTransportAddress_type;
      typedef ::xsd::cxx::tree::optional< oadrTransportAddress_type > oadrTransportAddress_optional;
      typedef ::xsd::cxx::tree::traits< oadrTransportAddress_type, char > oadrTransportAddress_traits;

      const oadrTransportAddress_optional&
      oadrTransportAddress () const;

      oadrTransportAddress_optional&
      oadrTransportAddress ();

      void
      oadrTransportAddress (const oadrTransportAddress_type& x);

      void
      oadrTransportAddress (const oadrTransportAddress_optional& x);

      void
      oadrTransportAddress (::std::unique_ptr< oadrTransportAddress_type > p);

      // oadrReportOnly
      //
      typedef ::xml_schema::boolean oadrReportOnly_type;
      typedef ::xsd::cxx::tree::traits< oadrReportOnly_type, char > oadrReportOnly_traits;

      const oadrReportOnly_type&
      oadrReportOnly () const;

      oadrReportOnly_type&
      oadrReportOnly ();

      void
      oadrReportOnly (const oadrReportOnly_type& x);

      // oadrXmlSignature
      //
      typedef ::xml_schema::boolean oadrXmlSignature_type;
      typedef ::xsd::cxx::tree::traits< oadrXmlSignature_type, char > oadrXmlSignature_traits;

      const oadrXmlSignature_type&
      oadrXmlSignature () const;

      oadrXmlSignature_type&
      oadrXmlSignature ();

      void
      oadrXmlSignature (const oadrXmlSignature_type& x);

      // oadrVenName
      //
      typedef ::xml_schema::string oadrVenName_type;
      typedef ::xsd::cxx::tree::optional< oadrVenName_type > oadrVenName_optional;
      typedef ::xsd::cxx::tree::traits< oadrVenName_type, char > oadrVenName_traits;

      const oadrVenName_optional&
      oadrVenName () const;

      oadrVenName_optional&
      oadrVenName ();

      void
      oadrVenName (const oadrVenName_type& x);

      void
      oadrVenName (const oadrVenName_optional& x);

      void
      oadrVenName (::std::unique_ptr< oadrVenName_type > p);

      // oadrHttpPullModel
      //
      typedef ::xml_schema::boolean oadrHttpPullModel_type;
      typedef ::xsd::cxx::tree::optional< oadrHttpPullModel_type > oadrHttpPullModel_optional;
      typedef ::xsd::cxx::tree::traits< oadrHttpPullModel_type, char > oadrHttpPullModel_traits;

      const oadrHttpPullModel_optional&
      oadrHttpPullModel () const;

      oadrHttpPullModel_optional&
      oadrHttpPullModel ();

      void
      oadrHttpPullModel (const oadrHttpPullModel_type& x);

      void
      oadrHttpPullModel (const oadrHttpPullModel_optional& x);

      // schemaVersion
      //
      typedef ::oadr2b::ei::schemaVersionType schemaVersion_type;
      typedef ::xsd::cxx::tree::optional< schemaVersion_type > schemaVersion_optional;
      typedef ::xsd::cxx::tree::traits< schemaVersion_type, char > schemaVersion_traits;

      const schemaVersion_optional&
      schemaVersion () const;

      schemaVersion_optional&
      schemaVersion ();

      void
      schemaVersion (const schemaVersion_type& x);

      void
      schemaVersion (const schemaVersion_optional& x);

      void
      schemaVersion (::std::unique_ptr< schemaVersion_type > p);

      // Constructors.
      //
      oadrCreatePartyRegistrationType (const requestID_type&,
                                       const oadrProfileName_type&,
                                       const oadrTransportName_type&,
                                       const oadrReportOnly_type&,
                                       const oadrXmlSignature_type&);

      oadrCreatePartyRegistrationType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      oadrCreatePartyRegistrationType (const oadrCreatePartyRegistrationType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual oadrCreatePartyRegistrationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      oadrCreatePartyRegistrationType&
      operator= (const oadrCreatePartyRegistrationType& x);

      virtual 
      ~oadrCreatePartyRegistrationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< requestID_type > requestID_;
      registrationID_optional registrationID_;
      venID_optional venID_;
      ::xsd::cxx::tree::one< oadrProfileName_type > oadrProfileName_;
      ::xsd::cxx::tree::one< oadrTransportName_type > oadrTransportName_;
      oadrTransportAddress_optional oadrTransportAddress_;
      ::xsd::cxx::tree::one< oadrReportOnly_type > oadrReportOnly_;
      ::xsd::cxx::tree::one< oadrXmlSignature_type > oadrXmlSignature_;
      oadrVenName_optional oadrVenName_;
      oadrHttpPullModel_optional oadrHttpPullModel_;
      schemaVersion_optional schemaVersion_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace oadr2b
{
  namespace oadr
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace oadr2b
{
  namespace oadr
  {
    void
    operator<< (::xercesc::DOMElement&, const oadrCreatePartyRegistrationType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // OADR_CREATE_PARTY_REGISTRATION_TYPE_HXX
