// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "EiOptType.hxx"

#include "OptTypeType.hxx"

#include "OptReasonType.hxx"

#include "MarketContextType.hxx"

#include "VavailabilityType.hxx"

#include "DateTimeType.hxx"

#include "schemaVersionType.hxx"

namespace oadr2b
{
  namespace ei
  {
    // EiOptType
    // 

    const EiOptType::optID_type& EiOptType::
    optID () const
    {
      return this->optID_.get ();
    }

    EiOptType::optID_type& EiOptType::
    optID ()
    {
      return this->optID_.get ();
    }

    void EiOptType::
    optID (const optID_type& x)
    {
      this->optID_.set (x);
    }

    void EiOptType::
    optID (::std::unique_ptr< optID_type > x)
    {
      this->optID_.set (std::move (x));
    }

    const EiOptType::optType_type& EiOptType::
    optType () const
    {
      return this->optType_.get ();
    }

    EiOptType::optType_type& EiOptType::
    optType ()
    {
      return this->optType_.get ();
    }

    void EiOptType::
    optType (const optType_type& x)
    {
      this->optType_.set (x);
    }

    void EiOptType::
    optType (::std::unique_ptr< optType_type > x)
    {
      this->optType_.set (std::move (x));
    }

    const EiOptType::optReason_type& EiOptType::
    optReason () const
    {
      return this->optReason_.get ();
    }

    EiOptType::optReason_type& EiOptType::
    optReason ()
    {
      return this->optReason_.get ();
    }

    void EiOptType::
    optReason (const optReason_type& x)
    {
      this->optReason_.set (x);
    }

    void EiOptType::
    optReason (::std::unique_ptr< optReason_type > x)
    {
      this->optReason_.set (std::move (x));
    }

    const EiOptType::marketContext_optional& EiOptType::
    marketContext () const
    {
      return this->marketContext_;
    }

    EiOptType::marketContext_optional& EiOptType::
    marketContext ()
    {
      return this->marketContext_;
    }

    void EiOptType::
    marketContext (const marketContext_type& x)
    {
      this->marketContext_.set (x);
    }

    void EiOptType::
    marketContext (const marketContext_optional& x)
    {
      this->marketContext_ = x;
    }

    void EiOptType::
    marketContext (::std::unique_ptr< marketContext_type > x)
    {
      this->marketContext_.set (std::move (x));
    }

    const EiOptType::venID_type& EiOptType::
    venID () const
    {
      return this->venID_.get ();
    }

    EiOptType::venID_type& EiOptType::
    venID ()
    {
      return this->venID_.get ();
    }

    void EiOptType::
    venID (const venID_type& x)
    {
      this->venID_.set (x);
    }

    void EiOptType::
    venID (::std::unique_ptr< venID_type > x)
    {
      this->venID_.set (std::move (x));
    }

    const EiOptType::vavailability_optional& EiOptType::
    vavailability () const
    {
      return this->vavailability_;
    }

    EiOptType::vavailability_optional& EiOptType::
    vavailability ()
    {
      return this->vavailability_;
    }

    void EiOptType::
    vavailability (const vavailability_type& x)
    {
      this->vavailability_.set (x);
    }

    void EiOptType::
    vavailability (const vavailability_optional& x)
    {
      this->vavailability_ = x;
    }

    void EiOptType::
    vavailability (::std::unique_ptr< vavailability_type > x)
    {
      this->vavailability_.set (std::move (x));
    }

    const EiOptType::createdDateTime_type& EiOptType::
    createdDateTime () const
    {
      return this->createdDateTime_.get ();
    }

    EiOptType::createdDateTime_type& EiOptType::
    createdDateTime ()
    {
      return this->createdDateTime_.get ();
    }

    void EiOptType::
    createdDateTime (const createdDateTime_type& x)
    {
      this->createdDateTime_.set (x);
    }

    void EiOptType::
    createdDateTime (::std::unique_ptr< createdDateTime_type > x)
    {
      this->createdDateTime_.set (std::move (x));
    }

    const EiOptType::schemaVersion_optional& EiOptType::
    schemaVersion () const
    {
      return this->schemaVersion_;
    }

    EiOptType::schemaVersion_optional& EiOptType::
    schemaVersion ()
    {
      return this->schemaVersion_;
    }

    void EiOptType::
    schemaVersion (const schemaVersion_type& x)
    {
      this->schemaVersion_.set (x);
    }

    void EiOptType::
    schemaVersion (const schemaVersion_optional& x)
    {
      this->schemaVersion_ = x;
    }

    void EiOptType::
    schemaVersion (::std::unique_ptr< schemaVersion_type > x)
    {
      this->schemaVersion_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    // EiOptType
    //

    EiOptType::
    EiOptType (const optID_type& optID,
               const optType_type& optType,
               const optReason_type& optReason,
               const venID_type& venID,
               const createdDateTime_type& createdDateTime)
    : ::xml_schema::type (),
      optID_ (optID, this),
      optType_ (optType, this),
      optReason_ (optReason, this),
      marketContext_ (this),
      venID_ (venID, this),
      vavailability_ (this),
      createdDateTime_ (createdDateTime, this),
      schemaVersion_ (this)
    {
    }

    EiOptType::
    EiOptType (const EiOptType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      optID_ (x.optID_, f, this),
      optType_ (x.optType_, f, this),
      optReason_ (x.optReason_, f, this),
      marketContext_ (x.marketContext_, f, this),
      venID_ (x.venID_, f, this),
      vavailability_ (x.vavailability_, f, this),
      createdDateTime_ (x.createdDateTime_, f, this),
      schemaVersion_ (x.schemaVersion_, f, this)
    {
    }

    EiOptType::
    EiOptType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      optID_ (this),
      optType_ (this),
      optReason_ (this),
      marketContext_ (this),
      venID_ (this),
      vavailability_ (this),
      createdDateTime_ (this),
      schemaVersion_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void EiOptType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // optID
        //
        if (n.name () == "optID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< optID_type > r (
            optID_traits::create (i, f, this));

          if (!optID_.present ())
          {
            this->optID_.set (::std::move (r));
            continue;
          }
        }

        // optType
        //
        if (n.name () == "optType" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< optType_type > r (
            optType_traits::create (i, f, this));

          if (!optType_.present ())
          {
            this->optType_.set (::std::move (r));
            continue;
          }
        }

        // optReason
        //
        if (n.name () == "optReason" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< optReason_type > r (
            optReason_traits::create (i, f, this));

          if (!optReason_.present ())
          {
            this->optReason_.set (::std::move (r));
            continue;
          }
        }

        // marketContext
        //
        if (n.name () == "marketContext" && n.namespace_ () == "http://docs.oasis-open.org/ns/emix/2011/06")
        {
          ::std::unique_ptr< marketContext_type > r (
            marketContext_traits::create (i, f, this));

          if (!this->marketContext_)
          {
            this->marketContext_.set (::std::move (r));
            continue;
          }
        }

        // venID
        //
        if (n.name () == "venID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< venID_type > r (
            venID_traits::create (i, f, this));

          if (!venID_.present ())
          {
            this->venID_.set (::std::move (r));
            continue;
          }
        }

        // vavailability
        //
        if (n.name () == "vavailability" && n.namespace_ () == "urn:ietf:params:xml:ns:icalendar-2.0")
        {
          ::std::unique_ptr< vavailability_type > r (
            vavailability_traits::create (i, f, this));

          if (!this->vavailability_)
          {
            this->vavailability_.set (::std::move (r));
            continue;
          }
        }

        // createdDateTime
        //
        if (n.name () == "createdDateTime" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< createdDateTime_type > r (
            createdDateTime_traits::create (i, f, this));

          if (!createdDateTime_.present ())
          {
            this->createdDateTime_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!optID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "optID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!optType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "optType",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!optReason_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "optReason",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!venID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "venID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!createdDateTime_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "createdDateTime",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "schemaVersion" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          this->schemaVersion_.set (schemaVersion_traits::create (i, f, this));
          continue;
        }
      }
    }

    EiOptType* EiOptType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EiOptType (*this, f, c);
    }

    EiOptType& EiOptType::
    operator= (const EiOptType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->optID_ = x.optID_;
        this->optType_ = x.optType_;
        this->optReason_ = x.optReason_;
        this->marketContext_ = x.marketContext_;
        this->venID_ = x.venID_;
        this->vavailability_ = x.vavailability_;
        this->createdDateTime_ = x.createdDateTime_;
        this->schemaVersion_ = x.schemaVersion_;
      }

      return *this;
    }

    EiOptType::
    ~EiOptType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace ei
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    void
    operator<< (::xercesc::DOMElement& e, const EiOptType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // optID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "optID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.optID ();
      }

      // optType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "optType",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.optType ();
      }

      // optReason
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "optReason",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.optReason ();
      }

      // marketContext
      //
      if (i.marketContext ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "marketContext",
            "http://docs.oasis-open.org/ns/emix/2011/06",
            e));

        s << *i.marketContext ();
      }

      // venID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "venID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.venID ();
      }

      // vavailability
      //
      if (i.vavailability ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "vavailability",
            "urn:ietf:params:xml:ns:icalendar-2.0",
            e));

        s << *i.vavailability ();
      }

      // createdDateTime
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "createdDateTime",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.createdDateTime ();
      }

      // schemaVersion
      //
      if (i.schemaVersion ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "schemaVersion",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        a << *i.schemaVersion ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

