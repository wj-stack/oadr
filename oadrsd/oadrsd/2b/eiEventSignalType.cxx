// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "eiEventSignalType.hxx"

#include "intervals.hxx"

#include "EiTargetType.hxx"

#include "signalNameType.hxx"

#include "SignalTypeEnumeratedType.hxx"

#include "ItemBaseType.hxx"

#include "currentValueType.hxx"

namespace oadr2b
{
  namespace ei
  {
    // eiEventSignalType
    // 

    const eiEventSignalType::intervals_type& eiEventSignalType::
    intervals () const
    {
      return this->intervals_.get ();
    }

    eiEventSignalType::intervals_type& eiEventSignalType::
    intervals ()
    {
      return this->intervals_.get ();
    }

    void eiEventSignalType::
    intervals (const intervals_type& x)
    {
      this->intervals_.set (x);
    }

    void eiEventSignalType::
    intervals (::std::unique_ptr< intervals_type > x)
    {
      this->intervals_.set (std::move (x));
    }

    const eiEventSignalType::eiTarget_optional& eiEventSignalType::
    eiTarget () const
    {
      return this->eiTarget_;
    }

    eiEventSignalType::eiTarget_optional& eiEventSignalType::
    eiTarget ()
    {
      return this->eiTarget_;
    }

    void eiEventSignalType::
    eiTarget (const eiTarget_type& x)
    {
      this->eiTarget_.set (x);
    }

    void eiEventSignalType::
    eiTarget (const eiTarget_optional& x)
    {
      this->eiTarget_ = x;
    }

    void eiEventSignalType::
    eiTarget (::std::unique_ptr< eiTarget_type > x)
    {
      this->eiTarget_.set (std::move (x));
    }

    const eiEventSignalType::signalName_type& eiEventSignalType::
    signalName () const
    {
      return this->signalName_.get ();
    }

    eiEventSignalType::signalName_type& eiEventSignalType::
    signalName ()
    {
      return this->signalName_.get ();
    }

    void eiEventSignalType::
    signalName (const signalName_type& x)
    {
      this->signalName_.set (x);
    }

    void eiEventSignalType::
    signalName (::std::unique_ptr< signalName_type > x)
    {
      this->signalName_.set (std::move (x));
    }

    const eiEventSignalType::signalType_type& eiEventSignalType::
    signalType () const
    {
      return this->signalType_.get ();
    }

    eiEventSignalType::signalType_type& eiEventSignalType::
    signalType ()
    {
      return this->signalType_.get ();
    }

    void eiEventSignalType::
    signalType (const signalType_type& x)
    {
      this->signalType_.set (x);
    }

    void eiEventSignalType::
    signalType (::std::unique_ptr< signalType_type > x)
    {
      this->signalType_.set (std::move (x));
    }

    const eiEventSignalType::signalID_type& eiEventSignalType::
    signalID () const
    {
      return this->signalID_.get ();
    }

    eiEventSignalType::signalID_type& eiEventSignalType::
    signalID ()
    {
      return this->signalID_.get ();
    }

    void eiEventSignalType::
    signalID (const signalID_type& x)
    {
      this->signalID_.set (x);
    }

    void eiEventSignalType::
    signalID (::std::unique_ptr< signalID_type > x)
    {
      this->signalID_.set (std::move (x));
    }

    const eiEventSignalType::itemBase_optional& eiEventSignalType::
    itemBase () const
    {
      return this->itemBase_;
    }

    eiEventSignalType::itemBase_optional& eiEventSignalType::
    itemBase ()
    {
      return this->itemBase_;
    }

    void eiEventSignalType::
    itemBase (const itemBase_type& x)
    {
      this->itemBase_.set (x);
    }

    void eiEventSignalType::
    itemBase (const itemBase_optional& x)
    {
      this->itemBase_ = x;
    }

    void eiEventSignalType::
    itemBase (::std::unique_ptr< itemBase_type > x)
    {
      this->itemBase_.set (std::move (x));
    }

    const eiEventSignalType::currentValue_optional& eiEventSignalType::
    currentValue () const
    {
      return this->currentValue_;
    }

    eiEventSignalType::currentValue_optional& eiEventSignalType::
    currentValue ()
    {
      return this->currentValue_;
    }

    void eiEventSignalType::
    currentValue (const currentValue_type& x)
    {
      this->currentValue_.set (x);
    }

    void eiEventSignalType::
    currentValue (const currentValue_optional& x)
    {
      this->currentValue_ = x;
    }

    void eiEventSignalType::
    currentValue (::std::unique_ptr< currentValue_type > x)
    {
      this->currentValue_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    // eiEventSignalType
    //

    eiEventSignalType::
    eiEventSignalType (const intervals_type& intervals,
                       const signalName_type& signalName,
                       const signalType_type& signalType,
                       const signalID_type& signalID)
    : ::xml_schema::type (),
      intervals_ (intervals, this),
      eiTarget_ (this),
      signalName_ (signalName, this),
      signalType_ (signalType, this),
      signalID_ (signalID, this),
      itemBase_ (this),
      currentValue_ (this)
    {
    }

    eiEventSignalType::
    eiEventSignalType (::std::unique_ptr< intervals_type > intervals,
                       const signalName_type& signalName,
                       const signalType_type& signalType,
                       const signalID_type& signalID)
    : ::xml_schema::type (),
      intervals_ (std::move (intervals), this),
      eiTarget_ (this),
      signalName_ (signalName, this),
      signalType_ (signalType, this),
      signalID_ (signalID, this),
      itemBase_ (this),
      currentValue_ (this)
    {
    }

    eiEventSignalType::
    eiEventSignalType (const eiEventSignalType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      intervals_ (x.intervals_, f, this),
      eiTarget_ (x.eiTarget_, f, this),
      signalName_ (x.signalName_, f, this),
      signalType_ (x.signalType_, f, this),
      signalID_ (x.signalID_, f, this),
      itemBase_ (x.itemBase_, f, this),
      currentValue_ (x.currentValue_, f, this)
    {
    }

    eiEventSignalType::
    eiEventSignalType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      intervals_ (this),
      eiTarget_ (this),
      signalName_ (this),
      signalType_ (this),
      signalID_ (this),
      itemBase_ (this),
      currentValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void eiEventSignalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // intervals
        //
        if (n.name () == "intervals" && n.namespace_ () == "urn:ietf:params:xml:ns:icalendar-2.0:stream")
        {
          ::std::unique_ptr< intervals_type > r (
            intervals_traits::create (i, f, this));

          if (!intervals_.present ())
          {
            this->intervals_.set (::std::move (r));
            continue;
          }
        }

        // eiTarget
        //
        if (n.name () == "eiTarget" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< eiTarget_type > r (
            eiTarget_traits::create (i, f, this));

          if (!this->eiTarget_)
          {
            this->eiTarget_.set (::std::move (r));
            continue;
          }
        }

        // signalName
        //
        if (n.name () == "signalName" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< signalName_type > r (
            signalName_traits::create (i, f, this));

          if (!signalName_.present ())
          {
            this->signalName_.set (::std::move (r));
            continue;
          }
        }

        // signalType
        //
        if (n.name () == "signalType" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< signalType_type > r (
            signalType_traits::create (i, f, this));

          if (!signalType_.present ())
          {
            this->signalType_.set (::std::move (r));
            continue;
          }
        }

        // signalID
        //
        if (n.name () == "signalID" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< signalID_type > r (
            signalID_traits::create (i, f, this));

          if (!signalID_.present ())
          {
            this->signalID_.set (::std::move (r));
            continue;
          }
        }

        // itemBase
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "itemBase",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              &::xsd::cxx::tree::factory_impl< itemBase_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->itemBase_)
            {
              ::std::unique_ptr< itemBase_type > r (
                dynamic_cast< itemBase_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->itemBase_.set (::std::move (r));
              continue;
            }
          }
        }

        // currentValue
        //
        if (n.name () == "currentValue" && n.namespace_ () == "http://docs.oasis-open.org/ns/energyinterop/201110")
        {
          ::std::unique_ptr< currentValue_type > r (
            currentValue_traits::create (i, f, this));

          if (!this->currentValue_)
          {
            this->currentValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!intervals_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "intervals",
          "urn:ietf:params:xml:ns:icalendar-2.0:stream");
      }

      if (!signalName_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "signalName",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!signalType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "signalType",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!signalID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "signalID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }
    }

    eiEventSignalType* eiEventSignalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class eiEventSignalType (*this, f, c);
    }

    eiEventSignalType& eiEventSignalType::
    operator= (const eiEventSignalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->intervals_ = x.intervals_;
        this->eiTarget_ = x.eiTarget_;
        this->signalName_ = x.signalName_;
        this->signalType_ = x.signalType_;
        this->signalID_ = x.signalID_;
        this->itemBase_ = x.itemBase_;
        this->currentValue_ = x.currentValue_;
      }

      return *this;
    }

    eiEventSignalType::
    ~eiEventSignalType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace ei
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    void
    operator<< (::xercesc::DOMElement& e, const eiEventSignalType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // intervals
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "intervals",
            "urn:ietf:params:xml:ns:icalendar-2.0:stream",
            e));

        s << i.intervals ();
      }

      // eiTarget
      //
      if (i.eiTarget ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "eiTarget",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.eiTarget ();
      }

      // signalName
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "signalName",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.signalName ();
      }

      // signalType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "signalType",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.signalType ();
      }

      // signalID
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "signalID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << i.signalID ();
      }

      // itemBase
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.itemBase ())
        {
          const eiEventSignalType::itemBase_type& x (*i.itemBase ());
          if (typeid (eiEventSignalType::itemBase_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "itemBase",
                "http://docs.oasis-open.org/ns/emix/2011/06",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "itemBase",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              true, true, e, x);
        }
      }

      // currentValue
      //
      if (i.currentValue ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "currentValue",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            e));

        s << *i.currentValue ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

