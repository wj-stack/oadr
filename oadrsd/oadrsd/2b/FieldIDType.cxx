// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "FieldIDType.hxx"

#include "PrimeFieldParamsType.hxx"

#include "TnBFieldParamsType.hxx"

#include "PnBFieldParamsType.hxx"

#include "CharTwoFieldParamsType.hxx"

namespace oadr2b
{
  namespace dsig11
  {
    // FieldIDType
    // 

    const FieldIDType::Prime_optional& FieldIDType::
    Prime () const
    {
      return this->Prime_;
    }

    FieldIDType::Prime_optional& FieldIDType::
    Prime ()
    {
      return this->Prime_;
    }

    void FieldIDType::
    Prime (const Prime_type& x)
    {
      this->Prime_.set (x);
    }

    void FieldIDType::
    Prime (const Prime_optional& x)
    {
      this->Prime_ = x;
    }

    void FieldIDType::
    Prime (::std::unique_ptr< Prime_type > x)
    {
      this->Prime_.set (std::move (x));
    }

    const FieldIDType::TnB_optional& FieldIDType::
    TnB () const
    {
      return this->TnB_;
    }

    FieldIDType::TnB_optional& FieldIDType::
    TnB ()
    {
      return this->TnB_;
    }

    void FieldIDType::
    TnB (const TnB_type& x)
    {
      this->TnB_.set (x);
    }

    void FieldIDType::
    TnB (const TnB_optional& x)
    {
      this->TnB_ = x;
    }

    void FieldIDType::
    TnB (::std::unique_ptr< TnB_type > x)
    {
      this->TnB_.set (std::move (x));
    }

    const FieldIDType::PnB_optional& FieldIDType::
    PnB () const
    {
      return this->PnB_;
    }

    FieldIDType::PnB_optional& FieldIDType::
    PnB ()
    {
      return this->PnB_;
    }

    void FieldIDType::
    PnB (const PnB_type& x)
    {
      this->PnB_.set (x);
    }

    void FieldIDType::
    PnB (const PnB_optional& x)
    {
      this->PnB_ = x;
    }

    void FieldIDType::
    PnB (::std::unique_ptr< PnB_type > x)
    {
      this->PnB_.set (std::move (x));
    }

    const FieldIDType::GnB_optional& FieldIDType::
    GnB () const
    {
      return this->GnB_;
    }

    FieldIDType::GnB_optional& FieldIDType::
    GnB ()
    {
      return this->GnB_;
    }

    void FieldIDType::
    GnB (const GnB_type& x)
    {
      this->GnB_.set (x);
    }

    void FieldIDType::
    GnB (const GnB_optional& x)
    {
      this->GnB_ = x;
    }

    void FieldIDType::
    GnB (::std::unique_ptr< GnB_type > x)
    {
      this->GnB_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    // FieldIDType
    //

    FieldIDType::
    FieldIDType ()
    : ::xml_schema::type (),
      Prime_ (this),
      TnB_ (this),
      PnB_ (this),
      GnB_ (this)
    {
    }

    FieldIDType::
    FieldIDType (const FieldIDType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Prime_ (x.Prime_, f, this),
      TnB_ (x.TnB_, f, this),
      PnB_ (x.PnB_, f, this),
      GnB_ (x.GnB_, f, this)
    {
    }

    FieldIDType::
    FieldIDType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Prime_ (this),
      TnB_ (this),
      PnB_ (this),
      GnB_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FieldIDType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Prime
        //
        if (n.name () == "Prime" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< Prime_type > r (
            Prime_traits::create (i, f, this));

          if (!this->Prime_)
          {
            this->Prime_.set (::std::move (r));
            continue;
          }
        }

        // TnB
        //
        if (n.name () == "TnB" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< TnB_type > r (
            TnB_traits::create (i, f, this));

          if (!this->TnB_)
          {
            this->TnB_.set (::std::move (r));
            continue;
          }
        }

        // PnB
        //
        if (n.name () == "PnB" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< PnB_type > r (
            PnB_traits::create (i, f, this));

          if (!this->PnB_)
          {
            this->PnB_.set (::std::move (r));
            continue;
          }
        }

        // GnB
        //
        if (n.name () == "GnB" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< GnB_type > r (
            GnB_traits::create (i, f, this));

          if (!this->GnB_)
          {
            this->GnB_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    FieldIDType* FieldIDType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FieldIDType (*this, f, c);
    }

    FieldIDType& FieldIDType::
    operator= (const FieldIDType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Prime_ = x.Prime_;
        this->TnB_ = x.TnB_;
        this->PnB_ = x.PnB_;
        this->GnB_ = x.GnB_;
      }

      return *this;
    }

    FieldIDType::
    ~FieldIDType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace dsig11
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    void
    operator<< (::xercesc::DOMElement& e, const FieldIDType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Prime
      //
      if (i.Prime ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Prime",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.Prime ();
      }

      // TnB
      //
      if (i.TnB ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TnB",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.TnB ();
      }

      // PnB
      //
      if (i.PnB ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PnB",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.PnB ();
      }

      // GnB
      //
      if (i.GnB ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "GnB",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.GnB ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

