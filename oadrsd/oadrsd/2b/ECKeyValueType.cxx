// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ECKeyValueType.hxx"

#include "ECParametersType.hxx"

#include "NamedCurveType.hxx"

#include "ECPointType.hxx"

namespace oadr2b
{
  namespace dsig11
  {
    // ECKeyValueType
    // 

    const ECKeyValueType::ECParameters_optional& ECKeyValueType::
    ECParameters () const
    {
      return this->ECParameters_;
    }

    ECKeyValueType::ECParameters_optional& ECKeyValueType::
    ECParameters ()
    {
      return this->ECParameters_;
    }

    void ECKeyValueType::
    ECParameters (const ECParameters_type& x)
    {
      this->ECParameters_.set (x);
    }

    void ECKeyValueType::
    ECParameters (const ECParameters_optional& x)
    {
      this->ECParameters_ = x;
    }

    void ECKeyValueType::
    ECParameters (::std::unique_ptr< ECParameters_type > x)
    {
      this->ECParameters_.set (std::move (x));
    }

    const ECKeyValueType::NamedCurve_optional& ECKeyValueType::
    NamedCurve () const
    {
      return this->NamedCurve_;
    }

    ECKeyValueType::NamedCurve_optional& ECKeyValueType::
    NamedCurve ()
    {
      return this->NamedCurve_;
    }

    void ECKeyValueType::
    NamedCurve (const NamedCurve_type& x)
    {
      this->NamedCurve_.set (x);
    }

    void ECKeyValueType::
    NamedCurve (const NamedCurve_optional& x)
    {
      this->NamedCurve_ = x;
    }

    void ECKeyValueType::
    NamedCurve (::std::unique_ptr< NamedCurve_type > x)
    {
      this->NamedCurve_.set (std::move (x));
    }

    const ECKeyValueType::PublicKey_type& ECKeyValueType::
    PublicKey () const
    {
      return this->PublicKey_.get ();
    }

    ECKeyValueType::PublicKey_type& ECKeyValueType::
    PublicKey ()
    {
      return this->PublicKey_.get ();
    }

    void ECKeyValueType::
    PublicKey (const PublicKey_type& x)
    {
      this->PublicKey_.set (x);
    }

    void ECKeyValueType::
    PublicKey (::std::unique_ptr< PublicKey_type > x)
    {
      this->PublicKey_.set (std::move (x));
    }

    const ECKeyValueType::Id_optional& ECKeyValueType::
    Id () const
    {
      return this->Id_;
    }

    ECKeyValueType::Id_optional& ECKeyValueType::
    Id ()
    {
      return this->Id_;
    }

    void ECKeyValueType::
    Id (const Id_type& x)
    {
      this->Id_.set (x);
    }

    void ECKeyValueType::
    Id (const Id_optional& x)
    {
      this->Id_ = x;
    }

    void ECKeyValueType::
    Id (::std::unique_ptr< Id_type > x)
    {
      this->Id_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    // ECKeyValueType
    //

    ECKeyValueType::
    ECKeyValueType (const PublicKey_type& PublicKey)
    : ::xml_schema::type (),
      ECParameters_ (this),
      NamedCurve_ (this),
      PublicKey_ (PublicKey, this),
      Id_ (this)
    {
    }

    ECKeyValueType::
    ECKeyValueType (const ECKeyValueType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ECParameters_ (x.ECParameters_, f, this),
      NamedCurve_ (x.NamedCurve_, f, this),
      PublicKey_ (x.PublicKey_, f, this),
      Id_ (x.Id_, f, this)
    {
    }

    ECKeyValueType::
    ECKeyValueType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ECParameters_ (this),
      NamedCurve_ (this),
      PublicKey_ (this),
      Id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ECKeyValueType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ECParameters
        //
        if (n.name () == "ECParameters" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< ECParameters_type > r (
            ECParameters_traits::create (i, f, this));

          if (!this->ECParameters_)
          {
            this->ECParameters_.set (::std::move (r));
            continue;
          }
        }

        // NamedCurve
        //
        if (n.name () == "NamedCurve" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< NamedCurve_type > r (
            NamedCurve_traits::create (i, f, this));

          if (!this->NamedCurve_)
          {
            this->NamedCurve_.set (::std::move (r));
            continue;
          }
        }

        // PublicKey
        //
        if (n.name () == "PublicKey" && n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          ::std::unique_ptr< PublicKey_type > r (
            PublicKey_traits::create (i, f, this));

          if (!PublicKey_.present ())
          {
            this->PublicKey_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!PublicKey_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "PublicKey",
          "http://www.w3.org/2009/xmldsig11#");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "Id" && n.namespace_ ().empty ())
        {
          this->Id_.set (Id_traits::create (i, f, this));
          continue;
        }
      }
    }

    ECKeyValueType* ECKeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ECKeyValueType (*this, f, c);
    }

    ECKeyValueType& ECKeyValueType::
    operator= (const ECKeyValueType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ECParameters_ = x.ECParameters_;
        this->NamedCurve_ = x.NamedCurve_;
        this->PublicKey_ = x.PublicKey_;
        this->Id_ = x.Id_;
      }

      return *this;
    }

    ECKeyValueType::
    ~ECKeyValueType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace dsig11
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    void
    operator<< (::xercesc::DOMElement& e, const ECKeyValueType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ECParameters
      //
      if (i.ECParameters ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ECParameters",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.ECParameters ();
      }

      // NamedCurve
      //
      if (i.NamedCurve ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NamedCurve",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << *i.NamedCurve ();
      }

      // PublicKey
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PublicKey",
            "http://www.w3.org/2009/xmldsig11#",
            e));

        s << i.PublicKey ();
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "Id",
            e));

        a << *i.Id ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

