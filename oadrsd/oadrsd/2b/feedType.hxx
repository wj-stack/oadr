// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef FEED_TYPE_HXX
#define FEED_TYPE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace Atom
{
  class feedType;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Atom
{
  class personType;
}

namespace Atom
{
  class categoryType;
}

namespace Atom
{
  class generatorType;
}

namespace Atom
{
  class iconType;
}

namespace Atom
{
  class idType;
}

namespace Atom
{
  class linkType;
}

namespace Atom
{
  class logoType;
}

namespace Atom
{
  class textType;
}

namespace Atom
{
  class dateTimeType;
}

namespace Atom
{
  class entryType;
}

namespace Atom
{
  class feedType: public ::xml_schema::type
  {
    public:
    // author
    //
    typedef ::Atom::personType author_type;
    typedef ::xsd::cxx::tree::sequence< author_type > author_sequence;
    typedef author_sequence::iterator author_iterator;
    typedef author_sequence::const_iterator author_const_iterator;
    typedef ::xsd::cxx::tree::traits< author_type, char > author_traits;

    const author_sequence&
    author () const;

    author_sequence&
    author ();

    void
    author (const author_sequence& s);

    // category
    //
    typedef ::Atom::categoryType category_type;
    typedef ::xsd::cxx::tree::sequence< category_type > category_sequence;
    typedef category_sequence::iterator category_iterator;
    typedef category_sequence::const_iterator category_const_iterator;
    typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

    const category_sequence&
    category () const;

    category_sequence&
    category ();

    void
    category (const category_sequence& s);

    // contributor
    //
    typedef ::Atom::personType contributor_type;
    typedef ::xsd::cxx::tree::sequence< contributor_type > contributor_sequence;
    typedef contributor_sequence::iterator contributor_iterator;
    typedef contributor_sequence::const_iterator contributor_const_iterator;
    typedef ::xsd::cxx::tree::traits< contributor_type, char > contributor_traits;

    const contributor_sequence&
    contributor () const;

    contributor_sequence&
    contributor ();

    void
    contributor (const contributor_sequence& s);

    // generator
    //
    typedef ::Atom::generatorType generator_type;
    typedef ::xsd::cxx::tree::sequence< generator_type > generator_sequence;
    typedef generator_sequence::iterator generator_iterator;
    typedef generator_sequence::const_iterator generator_const_iterator;
    typedef ::xsd::cxx::tree::traits< generator_type, char > generator_traits;

    const generator_sequence&
    generator () const;

    generator_sequence&
    generator ();

    void
    generator (const generator_sequence& s);

    // icon
    //
    typedef ::Atom::iconType icon_type;
    typedef ::xsd::cxx::tree::sequence< icon_type > icon_sequence;
    typedef icon_sequence::iterator icon_iterator;
    typedef icon_sequence::const_iterator icon_const_iterator;
    typedef ::xsd::cxx::tree::traits< icon_type, char > icon_traits;

    const icon_sequence&
    icon () const;

    icon_sequence&
    icon ();

    void
    icon (const icon_sequence& s);

    // id
    //
    typedef ::Atom::idType id_type;
    typedef ::xsd::cxx::tree::sequence< id_type > id_sequence;
    typedef id_sequence::iterator id_iterator;
    typedef id_sequence::const_iterator id_const_iterator;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_sequence&
    id () const;

    id_sequence&
    id ();

    void
    id (const id_sequence& s);

    // link
    //
    typedef ::Atom::linkType link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // logo
    //
    typedef ::Atom::logoType logo_type;
    typedef ::xsd::cxx::tree::sequence< logo_type > logo_sequence;
    typedef logo_sequence::iterator logo_iterator;
    typedef logo_sequence::const_iterator logo_const_iterator;
    typedef ::xsd::cxx::tree::traits< logo_type, char > logo_traits;

    const logo_sequence&
    logo () const;

    logo_sequence&
    logo ();

    void
    logo (const logo_sequence& s);

    // rights
    //
    typedef ::Atom::textType rights_type;
    typedef ::xsd::cxx::tree::sequence< rights_type > rights_sequence;
    typedef rights_sequence::iterator rights_iterator;
    typedef rights_sequence::const_iterator rights_const_iterator;
    typedef ::xsd::cxx::tree::traits< rights_type, char > rights_traits;

    const rights_sequence&
    rights () const;

    rights_sequence&
    rights ();

    void
    rights (const rights_sequence& s);

    // subtitle
    //
    typedef ::Atom::textType subtitle_type;
    typedef ::xsd::cxx::tree::sequence< subtitle_type > subtitle_sequence;
    typedef subtitle_sequence::iterator subtitle_iterator;
    typedef subtitle_sequence::const_iterator subtitle_const_iterator;
    typedef ::xsd::cxx::tree::traits< subtitle_type, char > subtitle_traits;

    const subtitle_sequence&
    subtitle () const;

    subtitle_sequence&
    subtitle ();

    void
    subtitle (const subtitle_sequence& s);

    // title
    //
    typedef ::Atom::textType title_type;
    typedef ::xsd::cxx::tree::sequence< title_type > title_sequence;
    typedef title_sequence::iterator title_iterator;
    typedef title_sequence::const_iterator title_const_iterator;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_sequence&
    title () const;

    title_sequence&
    title ();

    void
    title (const title_sequence& s);

    // updated
    //
    typedef ::Atom::dateTimeType updated_type;
    typedef ::xsd::cxx::tree::sequence< updated_type > updated_sequence;
    typedef updated_sequence::iterator updated_iterator;
    typedef updated_sequence::const_iterator updated_const_iterator;
    typedef ::xsd::cxx::tree::traits< updated_type, char > updated_traits;

    const updated_sequence&
    updated () const;

    updated_sequence&
    updated ();

    void
    updated (const updated_sequence& s);

    // entry
    //
    typedef ::Atom::entryType entry_type;
    typedef ::xsd::cxx::tree::sequence< entry_type > entry_sequence;
    typedef entry_sequence::iterator entry_iterator;
    typedef entry_sequence::const_iterator entry_const_iterator;
    typedef ::xsd::cxx::tree::traits< entry_type, char > entry_traits;

    const entry_sequence&
    entry () const;

    entry_sequence&
    entry ();

    void
    entry (const entry_sequence& s);

    // base
    //
    typedef ::xml_schema::uri base_type;
    typedef ::xsd::cxx::tree::optional< base_type > base_optional;
    typedef ::xsd::cxx::tree::traits< base_type, char > base_traits;

    const base_optional&
    base () const;

    base_optional&
    base ();

    void
    base (const base_type& x);

    void
    base (const base_optional& x);

    void
    base (::std::unique_ptr< base_type > p);

    // lang
    //
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::unique_ptr< lang_type > p);

    // Constructors.
    //
    feedType ();

    feedType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    feedType (const feedType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual feedType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    feedType&
    operator= (const feedType& x);

    virtual 
    ~feedType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    author_sequence author_;
    category_sequence category_;
    contributor_sequence contributor_;
    generator_sequence generator_;
    icon_sequence icon_;
    id_sequence id_;
    link_sequence link_;
    logo_sequence logo_;
    rights_sequence rights_;
    subtitle_sequence subtitle_;
    title_sequence title_;
    updated_sequence updated_;
    entry_sequence entry_;
    base_optional base_;
    lang_optional lang_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Atom
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Atom
{
  void
  operator<< (::xercesc::DOMElement&, const feedType&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // FEED_TYPE_HXX
